#!/usr/bin/env js
var Assert = function () {
  "use strict";

  var AssertionError = function (msg) {
    var final = "Assertion failed: " + msg;
    console.error(final);
  };

  var args = arguments;
  var res  = true;

  for(var i = 0; i < args.length; i++) {
    var d   = ((i - 1) < 0) ? 0 : i - 1;
    res     = (args[i] === args[d]);
    if(!res || typeof res === "undefined" || res === null || res !== res) {
      throw new AssertionError(args[i] + " != " + args[d]);
    }
  }

  var atn = "not_undefined";

  try {
    atn = assert(res);
  } catch (e) {
    if(e instanceof ReferenceError) {
      return true;
    }
  }

  if(typeof atn === "undefined") {
    return true;
  }
};
// Generated by LispyScript v1.0.0
var http    = require('http');
var url     = require('url');
var fs      = require('fs');
var path    = require('path');
var port    = (process.argv[2] || 1337);
var baseDir = __dirname;
(http.createServer(function(request,response) {
    return (function() {
    try {
        var reqUrl = url.parse(request.url);
        var fsPath = [baseDir,path.normalize(reqUrl.pathname)].join('');
        response.writeHead(200,{"Content-Type": "text/html"});
        var fStream = fs.createReadStream(fsPath);
        fStream.pipe(response);
        return fStream.on('error',function(err) {
            response.writeHead(404);
            return response.end();
        });

    } catch (e) {
    return (function(err) {
        response.writeHead(500);
        response.end();
        return console.log(e.stack);
    })(e);
    }
    })();
})).listen(port);
console.log("listening on port",port);
