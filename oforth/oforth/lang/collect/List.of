// ****************************************************************************
// ****************************************************************************
// List (Object->Collection->List)
// ****************************************************************************
// ****************************************************************************
// Copyright (c) 2014, 2015 Franck Bensusan. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be found 
// in the LICENSE.TXT file.
// ****************************************************************************

// List implements a sequence of objects.
// Lists are immutable
// Lists are 1-based (first element is at position 1).

// ****************************************************************************
// Collection Class new: List

// ****************************************************************************
// size -- n
//    Return the size of the list
// Native method

// ****************************************************************************
// at(aInteger) -- x
//    Return object at position aInteger 
//    Return null if none.
// Native method


// ****************************************************************************
// Lists are indexables
List is: Indexable

// ****************************************************************************


// ****************************************************************************
// List operations
// ****************************************************************************

// ****************************************************************************
// freeze
//    For lists, do nothing
List method: freeze ;

// ****************************************************************************


// ****************************************************************************
// List conversions
// ****************************************************************************

[ ] const: List.EmptyList

// ****************************************************************************
// asList 
//    Return a list with all items of the receiver
//    If the receiver is a collection, return itself
Object virtual: asList -- aList
   [ self ] ;

Null method: asList -- aList
   List.EmptyList ;

Collection virtual: asList -- aList
   self ;

String method: asList -- aList
   [ self ] ;

// ****************************************************************************


// ****************************************************************************
// Tests
// ****************************************************************************
test: [ [ 1, 2, 3, 4, 5 ] size 5 == ]
test: [ [ 1, 2, 3, 4, 5 ] notEmpty ]
test: [ [ 1, 2, 3, 4, 5 ] first 1 == ]
test: [ [ 1, 2, 3, 4, 5 ] last  5 == ]

test: [ 0 [ 1, 2, 3, 4, 5 ] apply(#+) 15 == ]
test: [ 0 [ 1, 2, 3, 4, 5 ] applyIf(#isEven, #+) 6 == ]
test: [ [ 1, 2, 3, 4, 5 ] reduce(#+) 15 == ]
test: [ [ 1, 2, 3, 4, 5 ] count(#isOdd) 3 == ]
test: [ [ 1, 2, 3, 4, 5 ] detect(#isEven, true) 2 == ]
test: [ [ 1, 2, 3, 4, 5 ] include(4) ]
test: [ [ 1, 2, 3, 4, 5 ] include(6) not ]
test: [ [ 1, 2, 3, 4, 5 ] conform(#[ 5 <= ]) ]

test: [ [ 1, 2, 3, 4, 5 ] sum   15 == ]
test: [ [ 1, 2, 3, 4, 5 ] prod 120 == ]
test: [ [ 1, 2, 3, 4, 5 ] avg    3 == ]

test: [ [ 1, 2, 3, 4, 5 ] [ 1, 2, 3, 4, 5 ] == ]
test: [ [ 1, 2, 3, 4, 5 ] 5 seq             == ]
test: [ [ 1, 2, 3, 4, 5 ] inRange(6) not ]
test: [ [ 1, 2, 3, 1, 5 ] indexOfFromTo(1, 2, 5) 4 == ]
test: [ [ 1, 2, 3, 4, 5 ] indexOf(4) 4 == ]
test: [ [ 1, 2, 3, 1, 5 ] lastIndexOf(1) 4 == ]

test: [ [ 3, 4 ] isAllAt(10 seq, 3) ]
test: [ [ 1, 2, 3, 4, 5 ] indexOfAll([3, 4]) 3 == ]
test: [ [ $aa, $bb, $cc, $dd, $ee ] indexOfAll([$cc, $dd]) 3 == ]

test: [ [[ $aa, 2 ], [ $bb, [3, 4]], [ $cc, "aaaa"]] valueAt($bb) [3, 4] == ]

// ****************************************************************************
// End of List class
// ****************************************************************************

