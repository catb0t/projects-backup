// ****************************************************************************
// ****************************************************************************
// Set (Object->Collection->Set)
// ****************************************************************************
// ****************************************************************************
// Copyright (c) 2015 Franck Bensusan. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be found 
// in the LICENSE.TXT file.
// ****************************************************************************

// Set implements a sequence of distinct objects.
// Sets are mutable objects

// ****************************************************************************
Collection Class new: Set(mutable elements)


// ****************************************************************************
// Set creation
// ****************************************************************************

// ****************************************************************************
// initialization
Set method: initialize 
   ListBuffer new := elements ;

// ****************************************************************************


// ****************************************************************************
// Set operations
// ****************************************************************************

// ****************************************************************************
// size
//    Return set size
Set method: size -- n 
   @elements size ;

// ****************************************************************************
// at(aInteger)
//    Return element at aInteger (1 based), null if null
Set method: at    // n aSet -- x
   @elements at ;

// ****************************************************************************
Set is: Indexable

// ****************************************************************************
// add(x)
//    Add x to set set. 
//    If x already exists into the set, to nothing
Set method: add(x)
   @elements include(x) ifFalse: [ @elements add(x) ] ;

// ****************************************************************************
// addAll(aCollection)
//    Add all elements of aCollection into the set
Set method: addAll(l)
   self l apply(#[ over add ]) drop ;

// ****************************************************************************
// empty
//    Empty the set
Set method: empty 
   @elements empty ;

// ****************************************************************************
// asList
//    Return an immutable list from a set
Set method: asList  -- aList
   ListBuffer newSize(self size) dup addAll(self) dup freeze ;

// ****************************************************************************


// ****************************************************************************
// Related definitions
// ****************************************************************************

// ****************************************************************************
// asSet
//    Create a set from a collection
Collection method: asSet -- aset 
   self Set new tuck addAll ;

// ****************************************************************************


// ****************************************************************************
// Tests
// ****************************************************************************
test: [ Set new dup add(10) dup add(10) dup add(11) [10, 11 ] == ]
test: [ [ 1, 2, 3, 1, 2, 3, 4, 1, 2 ] asSet [ 1, 2, 3, 4 ]    == ]


// ****************************************************************************
// End of Set class
// ****************************************************************************

